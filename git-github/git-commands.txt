git config --global user.name "user_name"
git config --global user.email "user_email"
git config --list
git config --local --list
git config --global --list
git config --system --list
git config user.name
git config user.email
git config --global --unset user.name
git config --global --unset user.email
git config --global user.name "Shahadat-Hossain"

git init // for initializing git into a folder
git clone // for downloading a repo from the github to your machine
git status // for checking current git status
git add --all or git add -A // for adding or staging all files for tracking in local git
git add . // for adding or staging all files in a folder for tracking in local git
git add * // for adding all accept the deleted files or folder
git add filename // for adding or stagin a specific file for tracking in local git
git add *.fileExtension // for adding all files of a specific file types for tracking in local git
git add . && git commit -m "message" // add and commit at the same time
git commit --allow-empty -m "Trigger empty update" // this will trigger an empty update
git rm --cached filename // to unstage files from git

git restore // for going back to the previouis stage after the adding process
git diff // for checking the difference of files

git commit -m "A clear message about the commit" // this command use to make commit all the things to the local repository
git commit -am "A clear message about the commit" // this is alos used to make a commit 
git log // with this command we can check what commit we have made (press q to escape or quite from this)
git log --oneline // this will display commmit history in one line (press q to escape or quite from this)

git show // this 
git show commit_id // this will show details about a specific commit
git show HEAD // this will show

git reset // for reseting everything except the deleted files
git reset --hard // for reseting everything including the deleted files
git reset --soft HEAD^ // this command is used to reset the commit and go back to the staging area
git reset Head^ // this commnad is used to reset and go back to the working directory
git reset --hard HEAD^ // this command is used to reset the commit and going back to the last commit

git checkout file_name // by this we can go to specific commit
git checkout master // with this we can go to the last commit

git branch // for checking all the branches
git branch -r // for checking all the branches of remote repo
git branch branch_name // for creating a new branch
git branch -m "branch_name" // for renaming the current branch name
git checkout branch_name // for changing the branch
git checkout -b feature-login // for creating a new branch and switch to it
git switch branch_name // for chanining the branch, similar to the 'git checkout'
git switch -c new_branch_name // for creating a new branch and switch to it
git merge branch_name -m "comments" // for merging two branch together
git push origin branch_name // for uploding the project from local to live or remote -- For one-time pushes or if you’re working on a branch you don’t plan to push or pull frequently.
git remote add origin repo_address // for linking a repository from local without to a github repo
git push -u origin branch_name // for uploading a repository from local to live or remote -- For branches you’ll work on regularly and want the convenience of not typing the remote and branch names each time. after this you only needs to use just "git push" only.
git fetch // for downloading all the changes from the live
git merge // for downloading all the files from the live
git pull // it executes what fetch and merge does together
git pull --rebase origin main // This command is used to update your local branch with the latest changes from the remote branch (main) while keeping your commits on top.
git push origin branch name // for pushing the repo in live on github in a specific branch of a repo
git push // for pushing the repo in live on github in a repo which does not have more than one branch
git push -f origin main // If you don’t care about remote changes and want to overwrite everything, you can force push: 



//** Git convention or standard **//
1. Always make commit
2. Write clear and conceise message for commit
3. Write no more than 50 characters of message for commit
4. Write commit message in imperative mode. For example: use Add, Fix, Update instead of Added, Fixed, Updated
5. Describe commit message in detail. use '-' before writing description message 

//** Git aliases **//
1. git config --list
2. git config --global --unset alias.st 
3. git config --global --list
4. git config --global alias.s "status" // this will make git status commnad to git s

git tag v1.0.0 // this will create a tag in the local git
git push origin v1.0.0 // this will push the tagged version the github


//** Markdown Formats **//
1. Enter double spaces to creae a new line or use <br />
2. Enter --- or <hr> to create a line
3. Enter # to create a h1 or use <h1> html tag. Use ##, ###, ####, ##### to create h2, h3, h4
4. Enter _some text_ or use <i> tag to create italic
5. Enter __some text__ or use <b> tag to create bold
6. Enter ~~some text~~ or <del> tag to create a strikethrough
7. Enter `some code` to create a inline code.
8. Enter ```some multiline codes``` to create a multiline code.
e.g. 

```html
<h1></h1>
```

```css
h1 {
	color: red;
}
```

```javascript
console.log('Hello World');
```

show item in order list
1. item1
2. item2
		1. sub-item1
		2. sub-item2
3 item3		

show item in unordered list
- item1
- item2
	- sub-item1
	- sub-item2
- item3

create tasklist
- [x] task1
- [x] task2
- [] uncomplete task

create automatic link
http://www.example.com

create disable link
`http://www.example.com`

create link in a text
[some text](http://www.example.com)

we can create link and use it afterwards
[some link] : http://www.example.com

[some text][some link]

use image from a folder called images
![alt text](./images/image.jpg) 

or we can use the regular <img /> tag of html
<img src="./images/image.jpg" width="200" height="200" title="some image" alt="alt text" />

copy any emoji from anywhere and just have paste it to show emoji

how to create table in markdown
| Name | Email |
| ------- | -------- |
|Palash | palash@gmail.com |
| John | john@gmail.com |


git remote or git remote -v // check wheter a local repo is connected to a remote connection
rm -rf repo-name // delete repo from local directory which was connected to global github repo
git branch -d branch_name // this will delete a specific branch in the local git
git checkout -b "branch_name" // this will create a new branch in the local git and will also move to that branch

how to contribute to another's github repository
================================================
1. Fork -> git clone -> make changes -> push the repo -> finally make pull request

